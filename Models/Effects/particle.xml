<?xml version="1.0"?>
<!--Document started 27/01/2008 by Tiago Gusmï¿½o
Updated 02/02/2008 to reflect syntax changes
Updated 03/02/2008 to add trails (connected particles)

This is a short specification/tutorial to define particle systems in FlightGear using XML


Stick this inside any model XML like it was an animation and it should work (notice the condition requires wheel on the ground)

Specification:

Note:-->
<!--<VALUEORPROP/> means you can either specify a property with factor and offset (result = (prop*factor)+offset ) in the usual way-->


<PropertyList>



<particlesystem>
  <type>normal</type>
  <!--<offset>
	<x-m>1.75098</x-m>
	<y-m>-15.5773</y-m>
	<z-m>2.10195</z-m>
	<pitch-deg>91</pitch-deg>
	<heading-deg>0</heading-deg>
	<roll-deg>0</roll-deg>
  </offset>-->
  <name>fluxGD</name>
  <attach>world</attach>
  <!--<texture>string</texture> = the texture path relative to the XML file location-->

  <!--particleAlignment BILLBOARD
          alignVectorX 1 0 0
          alignVectorY 0 1 0-->

  <emissive>false</emissive>
  <lighting>true</lighting>
  <align>billboard</align>

  <!--osgParticle::SectorPlacer {
          UniqueID SectorPlacer_32
          DataVariance DYNAMIC
          center 0 0 0
          radiusRange 0 0.35
          phiRange 0 6.28319
        }-->
  <placer>
    <type>sector</type>
    <radius-min-m>0</radius-min-m>
    <radius-max-m>0.35</radius-max-m>
    <phi-min-deg>0</phi-min-deg>
    <phi-max-deg>6.3</phi-max-deg>
    <!--<segments> = only for segments, encloses sequential points that form segments
      <vertex> = specifies one point, put as many as you want
        <x-m>float</x-m>
        <y-m>float</y-m>
        <z-m>float</z-m>
      </vertex>
      ....
      <vertex>
      ...
      </vertex>
    </segments>-->
  </placer>


   <!--osgParticle::RadialShooter {
          UniqueID RadialShooter_33
          DataVariance DYNAMIC
          thetaRange 0 0
          phiRange 0 0
          initialSpeedRange 4 5
          initialRotationalSpeedRange 40 0 0 70 0 0
        }-->
  <shooter>
	<theta-min-deg>0</theta-min-deg>
	<theta-max-deg>0</theta-max-deg>
	<phi-min-deg>0</phi-min-deg>
	<phi-max-deg>0</phi-max-deg>
	<speed-mps>
		<value>4</value>
		<spread>1</spread>
	</speed-mps>
	<rotation-speed>
	<x-min-deg-sec>40</x-min-deg-sec>
	<y-min-deg-sec>0</y-min-deg-sec>
	<z-min-deg-sec>0</z-min-deg-sec>
	<x-max-deg-sec>70</x-max-deg-sec>
	<y-max-deg-sec>0</y-max-deg-sec>
	<z-max-deg-sec>0</z-max-deg-sec>
	</rotation-speed>
  </shooter>

  <!--osgParticle::RandomRateCounter {
          UniqueID RandomRateCounter_31
          DataVariance DYNAMIC
          rateRange 80 80-->
  <counter>
	<particles-per-sec>
		<value>80</value>
		<spread>0</spread>
	</particles-per-sec>


	<!-- <condition> =a tipical condition that if not true stops particles from being emitted (PPS=0)
	....
	</condition>-->
  </counter>
  <!--colorRange 0.440696 0.504509 0.53962 0.8 0.0784009 0.535637 0.540536 1
  sizeRange 0.35 0.2-->
  <particle>
    <start>
	<color>
		<red>
			<value>0.45</value>
		</red>
		<green>
			<value>0.50</value>
		</green>
		<blue>
			<value>0.54</value>
		</blue>
		<alpha>
			<value>0.8</value>
		</alpha>
	</color>
      	<size><value>0.35</value></size>
    </start>
    <end>
	<color>
		<red>
			<value>0.078</value>
		</red>
		<green>
			<value>0.54</value>
		</green>
		<blue>
			<value>0.54</value>
		</blue>
		<alpha>
			<value>1</value>
		</alpha>
      	</color>
      	<size><value>0.2</value></size>
    </end>
   <!-- lifeTime 4-->
    <life-sec>
	    <value>4</value>
    </life-sec>
    <!--radius 0.8
	mass 0.8-->
    <radius-m>0.8</radius-m>
    <mass-kg>0.8</mass-kg>
  </particle>

  <program>
    <fluid>air</fluid>
    <gravity>disabled</gravity>
    <wind>disabled</wind>
  </program>


</particlesystem>

<!--Remarks:
  Don't forget you can use existing animations with particles, so if you want to direct or translate the emitter, just use translate, rotate, spin and so on (other animations might have interesting effects too i guess)
  Particle XML should be compatible with plib, as the tags will be ignored (you might get some warning if you attach them to animations though)
  Try not to use a lot of particles in a way that fills the screen, that will demand lots of fill rate and hurt FPS
  If you don't use any properties nor condtions, your particle system doesn't need to use a callback a so it's slightly better on the CPU (mostly useful for static models)
  If your particle lifetime is too big you might run out of particles temporarily (still being investigated)
  Use mass and size(radius) to adjust the reaction to gravity and wind (mass/size = density)
  Altough at the moment severe graphical bugs can be seen in the trails, they are usable. Consider your options correctly! You should consider giving them no initial velocity and most important, no spread, otherwise particles will race and the trail will fold. Start simple (no velocities and forces) and work your way up.-->

</PropertyList>